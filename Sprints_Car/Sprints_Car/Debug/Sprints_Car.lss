
Sprints_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a06  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800060  00800060  00000a7a  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000a7a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000adc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001312  00000000  00000000  00000c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000093c  00000000  00000000  00001f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c17  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  000034d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ee  00000000  00000000  000036e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008b1  00000000  00000000  00003dd6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00004687  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 dd 01 	call	0x3ba	; 0x3ba <main>
  74:	0c 94 01 05 	jmp	0xa02	; 0xa02 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
* Description	  : initializes the car module by initializing the modules used in it
**********************************************************************************************************************************/
void APP_init (void)
{

	MPWM_voidPwmInit();
  7c:	0e 94 1a 03 	call	0x634	; 0x634 <MPWM_voidPwmInit>
	EUDCMOTOR_voidDcMotorInit();
  80:	0e 94 b9 01 	call	0x372	; 0x372 <EUDCMOTOR_voidDcMotorInit>
	EUButton_init(GPIOA,PIN0,PULL_DOWN);
  84:	41 e0       	ldi	r20, 0x01	; 1
  86:	60 e0       	ldi	r22, 0x00	; 0
  88:	80 e0       	ldi	r24, 0x00	; 0
  8a:	0e 94 81 01 	call	0x302	; 0x302 <EUButton_init>
	EUButton_init(GPIOA,PIN1,PULL_DOWN);
  8e:	41 e0       	ldi	r20, 0x01	; 1
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	80 e0       	ldi	r24, 0x00	; 0
  94:	0e 94 81 01 	call	0x302	; 0x302 <EUButton_init>
	EUButton_init(GPIOA,PIN2,PULL_DOWN);
  98:	41 e0       	ldi	r20, 0x01	; 1
  9a:	62 e0       	ldi	r22, 0x02	; 2
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 81 01 	call	0x302	; 0x302 <EUButton_init>
	EUButton_init(GPIOA,PIN3,PULL_DOWN);
  a2:	41 e0       	ldi	r20, 0x01	; 1
  a4:	63 e0       	ldi	r22, 0x03	; 3
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	0e 94 81 01 	call	0x302	; 0x302 <EUButton_init>
  ac:	08 95       	ret

000000ae <Motor_moveForward>:
* Parameters (out): none
* Return value: none
* Description: control the motors to move forward with a wanted speed
************************************************************************************/
void Motor_moveForward(u8 u8_speed)
{
  ae:	cf 93       	push	r28
  b0:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,LOW);
  b2:	40 e0       	ldi	r20, 0x00	; 0
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,HIGH);
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	61 e0       	ldi	r22, 0x01	; 1
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN1_WIRE2,LOW);
  c6:	40 e0       	ldi	r20, 0x00	; 0
  c8:	62 e0       	ldi	r22, 0x02	; 2
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN2_WIRE2,HIGH);
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	63 e0       	ldi	r22, 0x03	; 3
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	EUDCMOTOR_voidStartMotor();
  da:	0e 94 d7 01 	call	0x3ae	; 0x3ae <EUDCMOTOR_voidStartMotor>
	EUDCMOTOR_voidSetMotorSpeed(u8_speed);
  de:	8c 2f       	mov	r24, r28
  e0:	0e 94 ce 01 	call	0x39c	; 0x39c <EUDCMOTOR_voidSetMotorSpeed>
	
}
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <Motor_moveBackward>:
* Parameters (out): none
* Return value: none
* Description: control the motors to move backward with a wanted speed
************************************************************************************/
void Motor_moveBackward(u8 u8_speed)
{
  e8:	cf 93       	push	r28
  ea:	c8 2f       	mov	r28, r24
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,HIGH);
  ec:	41 e0       	ldi	r20, 0x01	; 1
  ee:	60 e0       	ldi	r22, 0x00	; 0
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,LOW);
  f6:	40 e0       	ldi	r20, 0x00	; 0
  f8:	61 e0       	ldi	r22, 0x01	; 1
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN1_WIRE2,HIGH);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN2_WIRE2,LOW);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	63 e0       	ldi	r22, 0x03	; 3
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	EUDCMOTOR_voidStartMotor();
 114:	0e 94 d7 01 	call	0x3ae	; 0x3ae <EUDCMOTOR_voidStartMotor>
	EUDCMOTOR_voidSetMotorSpeed(u8_speed);
 118:	8c 2f       	mov	r24, r28
 11a:	0e 94 ce 01 	call	0x39c	; 0x39c <EUDCMOTOR_voidSetMotorSpeed>
	
}
 11e:	cf 91       	pop	r28
 120:	08 95       	ret

00000122 <Motor_moveRight>:
* Parameters (out): none
* Return value: none
* Description: control the car to move right with speed of 30%
************************************************************************************/
void Motor_moveRight(void){
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,LOW);
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,LOW);
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	61 e0       	ldi	r22, 0x01	; 1
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN1_WIRE2,LOW);
 136:	40 e0       	ldi	r20, 0x00	; 0
 138:	62 e0       	ldi	r22, 0x02	; 2
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN2_WIRE2,HIGH);
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	63 e0       	ldi	r22, 0x03	; 3
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	EUDCMOTOR_voidStartMotor();
 14a:	0e 94 d7 01 	call	0x3ae	; 0x3ae <EUDCMOTOR_voidStartMotor>
	EUDCMOTOR_voidSetMotorSpeed(SPEED_30);
 14e:	8e e1       	ldi	r24, 0x1E	; 30
 150:	0e 94 ce 01 	call	0x39c	; 0x39c <EUDCMOTOR_voidSetMotorSpeed>
 154:	08 95       	ret

00000156 <Motor_moveLeft>:
* Parameters (out): none
* Return value: none
* Description: control the car to move left with speed of 30%
************************************************************************************/
void Motor_moveLeft(void){
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,LOW);
 156:	40 e0       	ldi	r20, 0x00	; 0
 158:	60 e0       	ldi	r22, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,HIGH);
 160:	41 e0       	ldi	r20, 0x01	; 1
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN1_WIRE2,LOW);
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	62 e0       	ldi	r22, 0x02	; 2
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN2_WIRE2,LOW);
 174:	40 e0       	ldi	r20, 0x00	; 0
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	EUDCMOTOR_voidStartMotor();
 17e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <EUDCMOTOR_voidStartMotor>
	EUDCMOTOR_voidSetMotorSpeed(SPEED_30);
 182:	8e e1       	ldi	r24, 0x1E	; 30
 184:	0e 94 ce 01 	call	0x39c	; 0x39c <EUDCMOTOR_voidSetMotorSpeed>
 188:	08 95       	ret

0000018a <Motor_StopMove>:
* Parameters (out): none
* Return value: none
* Description: control the car to stop moving
************************************************************************************/
void Motor_StopMove(void){
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN1_WIRE1,LOW);
 18a:	40 e0       	ldi	r20, 0x00	; 0
 18c:	60 e0       	ldi	r22, 0x00	; 0
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR1,DCMOTOR_PIN2_WIRE1,LOW);
 194:	40 e0       	ldi	r20, 0x00	; 0
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN1_WIRE2,LOW);
 19e:	40 e0       	ldi	r20, 0x00	; 0
 1a0:	62 e0       	ldi	r22, 0x02	; 2
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	MDIO_voidSetPinValue(DCMOTOR_PORT_MOTOR2,DCMOTOR_PIN2_WIRE2,LOW);
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	63 e0       	ldi	r22, 0x03	; 3
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
	EUDCMOTOR_voidStopMotor();
 1b2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <EUDCMOTOR_voidStopMotor>
 1b6:	08 95       	ret

000001b8 <APP_voidStateUpdate>:
* Description: main task of the control system, handles all application cases
************************************************************************************/
void APP_voidStateUpdate(void)
{
	/* get readings from the buttons */
	BUTTON_G = EUButtonPressed(GPIOA,PIN0,PULL_DOWN);
 1b8:	41 e0       	ldi	r20, 0x01	; 1
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 a4 01 	call	0x348	; 0x348 <EUButtonPressed>
 1c2:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <BUTTON_G>
	BUTTON_M = EUButtonPressed(GPIOA,PIN1,PULL_DOWN);
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	61 e0       	ldi	r22, 0x01	; 1
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	0e 94 a4 01 	call	0x348	; 0x348 <EUButtonPressed>
 1d0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <BUTTON_M>
	BUTTON_R = EUButtonPressed(GPIOA,PIN2,PULL_DOWN);
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	0e 94 a4 01 	call	0x348	; 0x348 <EUButtonPressed>
 1de:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <BUTTON_R>
	BUTTON_L = EUButtonPressed(GPIOA,PIN3,PULL_DOWN);
 1e2:	41 e0       	ldi	r20, 0x01	; 1
 1e4:	63 e0       	ldi	r22, 0x03	; 3
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	0e 94 a4 01 	call	0x348	; 0x348 <EUButtonPressed>
 1ec:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <BUTTON_L>
	/* check the buttons */
	if (BUTTON_G == HIGH)
 1f0:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <BUTTON_G>
 1f4:	81 30       	cpi	r24, 0x01	; 1
 1f6:	09 f0       	breq	.+2      	; 0x1fa <APP_voidStateUpdate+0x42>
 1f8:	45 c0       	rjmp	.+138    	; 0x284 <APP_voidStateUpdate+0xcc>
	{
		switch(BUTTON_G_Counter)/* check how many the G button is was pressed*/
 1fa:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <BUTTON_G_Counter>
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	a9 f0       	breq	.+42     	; 0x22c <APP_voidStateUpdate+0x74>
 202:	28 f0       	brcs	.+10     	; 0x20e <APP_voidStateUpdate+0x56>
 204:	82 30       	cpi	r24, 0x02	; 2
 206:	09 f1       	breq	.+66     	; 0x24a <APP_voidStateUpdate+0x92>
 208:	83 30       	cpi	r24, 0x03	; 3
 20a:	71 f1       	breq	.+92     	; 0x268 <APP_voidStateUpdate+0xb0>
 20c:	3b c0       	rjmp	.+118    	; 0x284 <APP_voidStateUpdate+0xcc>
		{
			case(Initial_Value):
			{
				Car_Status = SPEED_30_FORWARD;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				BUTTON_G_Counter++;
 214:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <BUTTON_G_Counter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 218:	2f e5       	ldi	r18, 0x5F	; 95
 21a:	8a ee       	ldi	r24, 0xEA	; 234
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	21 50       	subi	r18, 0x01	; 1
 220:	80 40       	sbci	r24, 0x00	; 0
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	e1 f7       	brne	.-8      	; 0x21e <APP_voidStateUpdate+0x66>
 226:	00 c0       	rjmp	.+0      	; 0x228 <APP_voidStateUpdate+0x70>
 228:	00 00       	nop
 22a:	2c c0       	rjmp	.+88     	; 0x284 <APP_voidStateUpdate+0xcc>
				_delay_ms(300);/* delay to avoid long press*/
				break;
			}
			case(1):
			{
				Car_Status = SPEED_60_FORWARD;
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				BUTTON_G_Counter++;
 232:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <BUTTON_G_Counter>
 236:	2f e5       	ldi	r18, 0x5F	; 95
 238:	8a ee       	ldi	r24, 0xEA	; 234
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <APP_voidStateUpdate+0x84>
 244:	00 c0       	rjmp	.+0      	; 0x246 <APP_voidStateUpdate+0x8e>
 246:	00 00       	nop
 248:	1d c0       	rjmp	.+58     	; 0x284 <APP_voidStateUpdate+0xcc>
				_delay_ms(300);
				break;
			}
			case(2):
			{
				Car_Status = SPEED_90_FORWARD;
 24a:	83 e0       	ldi	r24, 0x03	; 3
 24c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				BUTTON_G_Counter++;
 250:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <BUTTON_G_Counter>
 254:	2f e5       	ldi	r18, 0x5F	; 95
 256:	8a ee       	ldi	r24, 0xEA	; 234
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <APP_voidStateUpdate+0xa2>
 262:	00 c0       	rjmp	.+0      	; 0x264 <APP_voidStateUpdate+0xac>
 264:	00 00       	nop
 266:	0e c0       	rjmp	.+28     	; 0x284 <APP_voidStateUpdate+0xcc>
				_delay_ms(300);
				break;
			}
			case(3):
			{
				Car_Status = SPEED_30_BACKWARD;
 268:	84 e0       	ldi	r24, 0x04	; 4
 26a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
				BUTTON_G_Counter = Initial_Value;
 26e:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <BUTTON_G_Counter>
 272:	2f e5       	ldi	r18, 0x5F	; 95
 274:	8a ee       	ldi	r24, 0xEA	; 234
 276:	90 e0       	ldi	r25, 0x00	; 0
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <APP_voidStateUpdate+0xc0>
 280:	00 c0       	rjmp	.+0      	; 0x282 <APP_voidStateUpdate+0xca>
 282:	00 00       	nop
			}
			default:
			break;
		}
	}
	if (BUTTON_M == HIGH)/* check the move button*/
 284:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <BUTTON_M>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	e1 f4       	brne	.+56     	; 0x2c4 <APP_voidStateUpdate+0x10c>
	{
		switch(Car_Status)
 28c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	69 f0       	breq	.+26     	; 0x2ae <APP_voidStateUpdate+0xf6>
 294:	18 f4       	brcc	.+6      	; 0x29c <APP_voidStateUpdate+0xe4>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	31 f0       	breq	.+12     	; 0x2a6 <APP_voidStateUpdate+0xee>
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <APP_voidStateUpdate+0x10c>
 29c:	83 30       	cpi	r24, 0x03	; 3
 29e:	59 f0       	breq	.+22     	; 0x2b6 <APP_voidStateUpdate+0xfe>
 2a0:	84 30       	cpi	r24, 0x04	; 4
 2a2:	69 f0       	breq	.+26     	; 0x2be <APP_voidStateUpdate+0x106>
 2a4:	0f c0       	rjmp	.+30     	; 0x2c4 <APP_voidStateUpdate+0x10c>
		{
			case(SPEED_30_FORWARD):
			{
				Motor_moveForward(SPEED_30);
 2a6:	8e e1       	ldi	r24, 0x1E	; 30
 2a8:	0e 94 57 00 	call	0xae	; 0xae <Motor_moveForward>
				break;
 2ac:	0b c0       	rjmp	.+22     	; 0x2c4 <APP_voidStateUpdate+0x10c>
			}
			case(SPEED_60_FORWARD):
			{
				Motor_moveForward(SPEED_60);
 2ae:	8c e3       	ldi	r24, 0x3C	; 60
 2b0:	0e 94 57 00 	call	0xae	; 0xae <Motor_moveForward>
				break;
 2b4:	07 c0       	rjmp	.+14     	; 0x2c4 <APP_voidStateUpdate+0x10c>
			}
			case(SPEED_90_FORWARD):
			{
				Motor_moveForward(SPEED_90);
 2b6:	8a e5       	ldi	r24, 0x5A	; 90
 2b8:	0e 94 57 00 	call	0xae	; 0xae <Motor_moveForward>
				break;
 2bc:	03 c0       	rjmp	.+6      	; 0x2c4 <APP_voidStateUpdate+0x10c>
			}
			case(SPEED_30_BACKWARD):
			{
				Motor_moveBackward(SPEED_30);
 2be:	8e e1       	ldi	r24, 0x1E	; 30
 2c0:	0e 94 74 00 	call	0xe8	; 0xe8 <Motor_moveBackward>
			}
			default:
			break;
		}
	}
	if (BUTTON_R == HIGH) /* check the move right button*/
 2c4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <BUTTON_R>
 2c8:	81 30       	cpi	r24, 0x01	; 1
 2ca:	11 f4       	brne	.+4      	; 0x2d0 <APP_voidStateUpdate+0x118>
	{
		Motor_moveRight();
 2cc:	0e 94 91 00 	call	0x122	; 0x122 <Motor_moveRight>
	}
	if (BUTTON_L == HIGH)/* check the move left button*/
 2d0:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BUTTON_L>
 2d4:	81 30       	cpi	r24, 0x01	; 1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <APP_voidStateUpdate+0x124>
	{
		Motor_moveLeft();
 2d8:	0e 94 ab 00 	call	0x156	; 0x156 <Motor_moveLeft>
	}
	if ((BUTTON_G == LOW) && (BUTTON_M == LOW) && (BUTTON_R == LOW) && (BUTTON_L == LOW))/*if any button not pressed stop the car*/
 2dc:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <BUTTON_G>
 2e0:	81 11       	cpse	r24, r1
 2e2:	0e c0       	rjmp	.+28     	; 0x300 <APP_voidStateUpdate+0x148>
 2e4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <BUTTON_M>
 2e8:	81 11       	cpse	r24, r1
 2ea:	0a c0       	rjmp	.+20     	; 0x300 <APP_voidStateUpdate+0x148>
 2ec:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <BUTTON_R>
 2f0:	81 11       	cpse	r24, r1
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <APP_voidStateUpdate+0x148>
 2f4:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <BUTTON_L>
 2f8:	81 11       	cpse	r24, r1
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <APP_voidStateUpdate+0x148>
	{
		Motor_StopMove();
 2fc:	0e 94 c5 00 	call	0x18a	; 0x18a <Motor_StopMove>
 300:	08 95       	ret

00000302 <EUButton_init>:

#define ERROR		-1


s8 EUButton_init(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8ConnectionType ) 
{
 302:	1f 93       	push	r17
 304:	cf 93       	push	r28
 306:	df 93       	push	r29
	if ( ((copy_u8Port == GPIOA ) || (copy_u8Port== GPIOB) || (copy_u8Port == GPIOC) || (copy_u8Port == GPIOD)) && ((copy_u8Pin <=7)))
 308:	84 30       	cpi	r24, 0x04	; 4
 30a:	c0 f4       	brcc	.+48     	; 0x33c <EUButton_init+0x3a>
 30c:	68 30       	cpi	r22, 0x08	; 8
 30e:	b0 f4       	brcc	.+44     	; 0x33c <EUButton_init+0x3a>
 310:	14 2f       	mov	r17, r20
 312:	d6 2f       	mov	r29, r22
 314:	c8 2f       	mov	r28, r24
	{
		MDIO_voidSetPinDirection(copy_u8Port,copy_u8Pin,LOW);
 316:	40 e0       	ldi	r20, 0x00	; 0
 318:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MDIO_voidSetPinDirection>
		if ( copy_u8ConnectionType == PULL_UP ){
 31c:	11 11       	cpse	r17, r1
 31e:	06 c0       	rjmp	.+12     	; 0x32c <EUButton_init+0x2a>
			MDIO_voidSetPinValue ( copy_u8Port , copy_u8Pin , HIGH ) ;
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	6d 2f       	mov	r22, r29
 324:	8c 2f       	mov	r24, r28
 326:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
 32a:	0a c0       	rjmp	.+20     	; 0x340 <EUButton_init+0x3e>
		}
		else if ( copy_u8ConnectionType == PULL_DOWN ){
 32c:	11 30       	cpi	r17, 0x01	; 1
 32e:	41 f4       	brne	.+16     	; 0x340 <EUButton_init+0x3e>
			MDIO_voidSetPinValue ( copy_u8Port , copy_u8Pin , LOW ) ;
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	6d 2f       	mov	r22, r29
 334:	8c 2f       	mov	r24, r28
 336:	0e 94 67 02 	call	0x4ce	; 0x4ce <MDIO_voidSetPinValue>
 33a:	02 c0       	rjmp	.+4      	; 0x340 <EUButton_init+0x3e>
		}
	}
	else {
		return ERROR ;
 33c:	8f ef       	ldi	r24, 0xFF	; 255
 33e:	00 c0       	rjmp	.+0      	; 0x340 <EUButton_init+0x3e>
	}
}
 340:	df 91       	pop	r29
 342:	cf 91       	pop	r28
 344:	1f 91       	pop	r17
 346:	08 95       	ret

00000348 <EUButtonPressed>:
s8	EUButtonPressed(u8 copy_u8Port , u8 copy_u8Pin , u8 copy_u8ConnectionType )
{
	/* Local Variable hold the Return Value */
	u8 copy_u8LocalReturn = 0 ;
	/* In case of Pull Up Connection */
	if (copy_u8ConnectionType == PULL_UP)
 348:	41 11       	cpse	r20, r1
 34a:	07 c0       	rjmp	.+14     	; 0x35a <EUButtonPressed+0x12>
	{	
		/* Read the Value */ 
		copy_u8LocalReturn=MDIO_voidGetPinValue(copy_u8Port,copy_u8Pin);
 34c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <MDIO_voidGetPinValue>
		/* If Pressed Return  */
		if (copy_u8LocalReturn == 0 )
			return 1 ;
 350:	91 e0       	ldi	r25, 0x01	; 1
 352:	88 23       	and	r24, r24
 354:	61 f0       	breq	.+24     	; 0x36e <EUButtonPressed+0x26>
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	0a c0       	rjmp	.+20     	; 0x36e <EUButtonPressed+0x26>
		/* Otherwise Return 0 */
		else 
			return 	 0 ;
	}
	/* In case of PULL Down */
	else if (copy_u8ConnectionType == PULL_DOWN)
 35a:	41 30       	cpi	r20, 0x01	; 1
 35c:	39 f4       	brne	.+14     	; 0x36c <EUButtonPressed+0x24>
	{
		/* Read the Value */ 
		copy_u8LocalReturn=MDIO_voidGetPinValue(copy_u8Port,copy_u8Pin);
 35e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <MDIO_voidGetPinValue>
	{	
		/* Read the Value */ 
		copy_u8LocalReturn=MDIO_voidGetPinValue(copy_u8Port,copy_u8Pin);
		/* If Pressed Return  */
		if (copy_u8LocalReturn == 0 )
			return 1 ;
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	81 30       	cpi	r24, 0x01	; 1
 366:	19 f0       	breq	.+6      	; 0x36e <EUButtonPressed+0x26>
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	01 c0       	rjmp	.+2      	; 0x36e <EUButtonPressed+0x26>
			return 	0 ;
		
	}
	/* if Error */
	else 
		return -1 ;
 36c:	9f ef       	ldi	r25, 0xFF	; 255
	
 36e:	89 2f       	mov	r24, r25
 370:	08 95       	ret

00000372 <EUDCMOTOR_voidDcMotorInit>:
 372:	41 e0       	ldi	r20, 0x01	; 1
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MDIO_voidSetPinDirection>
 37c:	41 e0       	ldi	r20, 0x01	; 1
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MDIO_voidSetPinDirection>
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MDIO_voidSetPinDirection>
 390:	41 e0       	ldi	r20, 0x01	; 1
 392:	63 e0       	ldi	r22, 0x03	; 3
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MDIO_voidSetPinDirection>
 39a:	08 95       	ret

0000039c <EUDCMOTOR_voidSetMotorSpeed>:
 39c:	68 2f       	mov	r22, r24
 39e:	70 e0       	ldi	r23, 0x00	; 0
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 06 04 	call	0x80c	; 0x80c <__floatunsisf>
 3a8:	0e 94 46 03 	call	0x68c	; 0x68c <MPWM_voidSetDutyCycle>
 3ac:	08 95       	ret

000003ae <EUDCMOTOR_voidStartMotor>:
 3ae:	0e 94 5d 03 	call	0x6ba	; 0x6ba <MPWM_voidStartPWM>
 3b2:	08 95       	ret

000003b4 <EUDCMOTOR_voidStopMotor>:
 3b4:	0e 94 61 03 	call	0x6c2	; 0x6c2 <MPWM_voidStopPWM>
 3b8:	08 95       	ret

000003ba <main>:
#include "APP/APP.h"


int main(void)
{
	APP_init();
 3ba:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	
    while (1) 
    {
		APP_voidStateUpdate();
 3be:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <APP_voidStateUpdate>
 3c2:	fd cf       	rjmp	.-6      	; 0x3be <main+0x4>

000003c4 <MDIO_voidSetPinDirection>:
		switch (copy_u8Port)
				{
					case GPIOA :	PORTA_REGISTER = copy_u8Value ;  break ;
					case GPIOB :	PORTB_REGISTER = copy_u8Value ;	break ;
					case GPIOC :	PORTC_REGISTER = copy_u8Value ;  break ;
					case GPIOD :	PORTD_REGISTER = copy_u8Value ;  break ;
 3c4:	41 30       	cpi	r20, 0x01	; 1
 3c6:	09 f0       	breq	.+2      	; 0x3ca <MDIO_voidSetPinDirection+0x6>
 3c8:	40 c0       	rjmp	.+128    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3ca:	81 30       	cpi	r24, 0x01	; 1
 3cc:	a1 f0       	breq	.+40     	; 0x3f6 <MDIO_voidSetPinDirection+0x32>
 3ce:	28 f0       	brcs	.+10     	; 0x3da <MDIO_voidSetPinDirection+0x16>
 3d0:	82 30       	cpi	r24, 0x02	; 2
 3d2:	f9 f0       	breq	.+62     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
 3d4:	83 30       	cpi	r24, 0x03	; 3
 3d6:	59 f1       	breq	.+86     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3d8:	08 95       	ret
 3da:	68 30       	cpi	r22, 0x08	; 8
 3dc:	08 f0       	brcs	.+2      	; 0x3e0 <MDIO_voidSetPinDirection+0x1c>
 3de:	76 c0       	rjmp	.+236    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 3e0:	2a b3       	in	r18, 0x1a	; 26
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <MDIO_voidSetPinDirection+0x28>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <MDIO_voidSetPinDirection+0x24>
 3f0:	82 2b       	or	r24, r18
 3f2:	8a bb       	out	0x1a, r24	; 26
 3f4:	08 95       	ret
 3f6:	68 30       	cpi	r22, 0x08	; 8
 3f8:	08 f0       	brcs	.+2      	; 0x3fc <MDIO_voidSetPinDirection+0x38>
 3fa:	68 c0       	rjmp	.+208    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 3fc:	27 b3       	in	r18, 0x17	; 23
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	02 c0       	rjmp	.+4      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	6a 95       	dec	r22
 40a:	e2 f7       	brpl	.-8      	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 40c:	82 2b       	or	r24, r18
 40e:	87 bb       	out	0x17, r24	; 23
 410:	08 95       	ret
 412:	68 30       	cpi	r22, 0x08	; 8
 414:	08 f0       	brcs	.+2      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 416:	5a c0       	rjmp	.+180    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 418:	24 b3       	in	r18, 0x14	; 20
 41a:	81 e0       	ldi	r24, 0x01	; 1
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	88 0f       	add	r24, r24
 422:	99 1f       	adc	r25, r25
 424:	6a 95       	dec	r22
 426:	e2 f7       	brpl	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	82 2b       	or	r24, r18
 42a:	84 bb       	out	0x14, r24	; 20
 42c:	08 95       	ret
 42e:	68 30       	cpi	r22, 0x08	; 8
 430:	08 f0       	brcs	.+2      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
 432:	4c c0       	rjmp	.+152    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 434:	21 b3       	in	r18, 0x11	; 17
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	6a 95       	dec	r22
 442:	e2 f7       	brpl	.-8      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 444:	82 2b       	or	r24, r18
 446:	81 bb       	out	0x11, r24	; 17
 448:	08 95       	ret
 44a:	41 11       	cpse	r20, r1
 44c:	3f c0       	rjmp	.+126    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 44e:	81 30       	cpi	r24, 0x01	; 1
 450:	a1 f0       	breq	.+40     	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 452:	28 f0       	brcs	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
 454:	82 30       	cpi	r24, 0x02	; 2
 456:	f9 f0       	breq	.+62     	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
 458:	83 30       	cpi	r24, 0x03	; 3
 45a:	59 f1       	breq	.+86     	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
 45c:	08 95       	ret
 45e:	68 30       	cpi	r22, 0x08	; 8
 460:	a8 f5       	brcc	.+106    	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 462:	2a b3       	in	r18, 0x1a	; 26
 464:	81 e0       	ldi	r24, 0x01	; 1
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	02 c0       	rjmp	.+4      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 46a:	88 0f       	add	r24, r24
 46c:	99 1f       	adc	r25, r25
 46e:	6a 95       	dec	r22
 470:	e2 f7       	brpl	.-8      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
 472:	80 95       	com	r24
 474:	82 23       	and	r24, r18
 476:	8a bb       	out	0x1a, r24	; 26
 478:	08 95       	ret
 47a:	68 30       	cpi	r22, 0x08	; 8
 47c:	38 f5       	brcc	.+78     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 47e:	27 b3       	in	r18, 0x17	; 23
 480:	81 e0       	ldi	r24, 0x01	; 1
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	02 c0       	rjmp	.+4      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
 486:	88 0f       	add	r24, r24
 488:	99 1f       	adc	r25, r25
 48a:	6a 95       	dec	r22
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
 48e:	80 95       	com	r24
 490:	82 23       	and	r24, r18
 492:	87 bb       	out	0x17, r24	; 23
 494:	08 95       	ret
 496:	68 30       	cpi	r22, 0x08	; 8
 498:	c8 f4       	brcc	.+50     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 49a:	24 b3       	in	r18, 0x14	; 20
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	6a 95       	dec	r22
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__LOCK_REGION_LENGTH__+0xa2>
 4aa:	80 95       	com	r24
 4ac:	82 23       	and	r24, r18
 4ae:	84 bb       	out	0x14, r24	; 20
 4b0:	08 95       	ret
 4b2:	68 30       	cpi	r22, 0x08	; 8
 4b4:	58 f4       	brcc	.+22     	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4b6:	21 b3       	in	r18, 0x11	; 17
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	02 c0       	rjmp	.+4      	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
 4be:	88 0f       	add	r24, r24
 4c0:	99 1f       	adc	r25, r25
 4c2:	6a 95       	dec	r22
 4c4:	e2 f7       	brpl	.-8      	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 4c6:	80 95       	com	r24
 4c8:	82 23       	and	r24, r18
 4ca:	81 bb       	out	0x11, r24	; 17
 4cc:	08 95       	ret

000004ce <MDIO_voidSetPinValue>:
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <MDIO_voidSetPinValue+0x6>
 4d2:	40 c0       	rjmp	.+128    	; 0x554 <MDIO_voidSetPinValue+0x86>
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	a1 f0       	breq	.+40     	; 0x500 <MDIO_voidSetPinValue+0x32>
 4d8:	28 f0       	brcs	.+10     	; 0x4e4 <MDIO_voidSetPinValue+0x16>
 4da:	82 30       	cpi	r24, 0x02	; 2
 4dc:	f9 f0       	breq	.+62     	; 0x51c <MDIO_voidSetPinValue+0x4e>
 4de:	83 30       	cpi	r24, 0x03	; 3
 4e0:	59 f1       	breq	.+86     	; 0x538 <MDIO_voidSetPinValue+0x6a>
 4e2:	08 95       	ret
 4e4:	68 30       	cpi	r22, 0x08	; 8
 4e6:	08 f0       	brcs	.+2      	; 0x4ea <MDIO_voidSetPinValue+0x1c>
 4e8:	76 c0       	rjmp	.+236    	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 4ea:	2b b3       	in	r18, 0x1b	; 27
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <MDIO_voidSetPinValue+0x28>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <MDIO_voidSetPinValue+0x24>
 4fa:	82 2b       	or	r24, r18
 4fc:	8b bb       	out	0x1b, r24	; 27
 4fe:	08 95       	ret
 500:	68 30       	cpi	r22, 0x08	; 8
 502:	08 f0       	brcs	.+2      	; 0x506 <MDIO_voidSetPinValue+0x38>
 504:	68 c0       	rjmp	.+208    	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 506:	28 b3       	in	r18, 0x18	; 24
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 c0       	rjmp	.+4      	; 0x512 <MDIO_voidSetPinValue+0x44>
 50e:	88 0f       	add	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	6a 95       	dec	r22
 514:	e2 f7       	brpl	.-8      	; 0x50e <MDIO_voidSetPinValue+0x40>
 516:	82 2b       	or	r24, r18
 518:	88 bb       	out	0x18, r24	; 24
 51a:	08 95       	ret
 51c:	68 30       	cpi	r22, 0x08	; 8
 51e:	08 f0       	brcs	.+2      	; 0x522 <MDIO_voidSetPinValue+0x54>
 520:	5a c0       	rjmp	.+180    	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 522:	25 b3       	in	r18, 0x15	; 21
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <MDIO_voidSetPinValue+0x60>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	6a 95       	dec	r22
 530:	e2 f7       	brpl	.-8      	; 0x52a <MDIO_voidSetPinValue+0x5c>
 532:	82 2b       	or	r24, r18
 534:	85 bb       	out	0x15, r24	; 21
 536:	08 95       	ret
 538:	68 30       	cpi	r22, 0x08	; 8
 53a:	08 f0       	brcs	.+2      	; 0x53e <MDIO_voidSetPinValue+0x70>
 53c:	4c c0       	rjmp	.+152    	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 53e:	22 b3       	in	r18, 0x12	; 18
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	90 e0       	ldi	r25, 0x00	; 0
 544:	02 c0       	rjmp	.+4      	; 0x54a <MDIO_voidSetPinValue+0x7c>
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	6a 95       	dec	r22
 54c:	e2 f7       	brpl	.-8      	; 0x546 <MDIO_voidSetPinValue+0x78>
 54e:	82 2b       	or	r24, r18
 550:	82 bb       	out	0x12, r24	; 18
 552:	08 95       	ret
 554:	41 11       	cpse	r20, r1
 556:	3f c0       	rjmp	.+126    	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 558:	81 30       	cpi	r24, 0x01	; 1
 55a:	a1 f0       	breq	.+40     	; 0x584 <MDIO_voidSetPinValue+0xb6>
 55c:	28 f0       	brcs	.+10     	; 0x568 <MDIO_voidSetPinValue+0x9a>
 55e:	82 30       	cpi	r24, 0x02	; 2
 560:	f9 f0       	breq	.+62     	; 0x5a0 <MDIO_voidSetPinValue+0xd2>
 562:	83 30       	cpi	r24, 0x03	; 3
 564:	59 f1       	breq	.+86     	; 0x5bc <MDIO_voidSetPinValue+0xee>
 566:	08 95       	ret
 568:	68 30       	cpi	r22, 0x08	; 8
 56a:	a8 f5       	brcc	.+106    	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 56c:	2b b3       	in	r18, 0x1b	; 27
 56e:	81 e0       	ldi	r24, 0x01	; 1
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	02 c0       	rjmp	.+4      	; 0x578 <MDIO_voidSetPinValue+0xaa>
 574:	88 0f       	add	r24, r24
 576:	99 1f       	adc	r25, r25
 578:	6a 95       	dec	r22
 57a:	e2 f7       	brpl	.-8      	; 0x574 <MDIO_voidSetPinValue+0xa6>
 57c:	80 95       	com	r24
 57e:	82 23       	and	r24, r18
 580:	8b bb       	out	0x1b, r24	; 27
 582:	08 95       	ret
 584:	68 30       	cpi	r22, 0x08	; 8
 586:	38 f5       	brcc	.+78     	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 588:	28 b3       	in	r18, 0x18	; 24
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <MDIO_voidSetPinValue+0xc6>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <MDIO_voidSetPinValue+0xc2>
 598:	80 95       	com	r24
 59a:	82 23       	and	r24, r18
 59c:	88 bb       	out	0x18, r24	; 24
 59e:	08 95       	ret
 5a0:	68 30       	cpi	r22, 0x08	; 8
 5a2:	c8 f4       	brcc	.+50     	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 5a4:	25 b3       	in	r18, 0x15	; 21
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	02 c0       	rjmp	.+4      	; 0x5b0 <MDIO_voidSetPinValue+0xe2>
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	6a 95       	dec	r22
 5b2:	e2 f7       	brpl	.-8      	; 0x5ac <MDIO_voidSetPinValue+0xde>
 5b4:	80 95       	com	r24
 5b6:	82 23       	and	r24, r18
 5b8:	85 bb       	out	0x15, r24	; 21
 5ba:	08 95       	ret
 5bc:	68 30       	cpi	r22, 0x08	; 8
 5be:	58 f4       	brcc	.+22     	; 0x5d6 <MDIO_voidSetPinValue+0x108>
 5c0:	22 b3       	in	r18, 0x12	; 18
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <MDIO_voidSetPinValue+0xfe>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <MDIO_voidSetPinValue+0xfa>
 5d0:	80 95       	com	r24
 5d2:	82 23       	and	r24, r18
 5d4:	82 bb       	out	0x12, r24	; 18
 5d6:	08 95       	ret

000005d8 <MDIO_voidGetPinValue>:
**********************************************************************************************************************************/

u8 MDIO_voidGetPinValue (u8 copy_u8Port , u8 copy_u8Pin )
{
	u8 LocGetValue = 0 ;
	switch (copy_u8Port )
 5d8:	81 30       	cpi	r24, 0x01	; 1
 5da:	79 f0       	breq	.+30     	; 0x5fa <MDIO_voidGetPinValue+0x22>
 5dc:	28 f0       	brcs	.+10     	; 0x5e8 <MDIO_voidGetPinValue+0x10>
 5de:	82 30       	cpi	r24, 0x02	; 2
 5e0:	a9 f0       	breq	.+42     	; 0x60c <MDIO_voidGetPinValue+0x34>
 5e2:	83 30       	cpi	r24, 0x03	; 3
 5e4:	e1 f0       	breq	.+56     	; 0x61e <MDIO_voidGetPinValue+0x46>
 5e6:	24 c0       	rjmp	.+72     	; 0x630 <MDIO_voidGetPinValue+0x58>
	{
		case GPIOA : LocGetValue = GET_BIT (PINA_REGISTER ,  copy_u8Pin ); break ;
 5e8:	89 b3       	in	r24, 0x19	; 25
 5ea:	90 e0       	ldi	r25, 0x00	; 0
 5ec:	02 c0       	rjmp	.+4      	; 0x5f2 <MDIO_voidGetPinValue+0x1a>
 5ee:	95 95       	asr	r25
 5f0:	87 95       	ror	r24
 5f2:	6a 95       	dec	r22
 5f4:	e2 f7       	brpl	.-8      	; 0x5ee <MDIO_voidGetPinValue+0x16>
 5f6:	81 70       	andi	r24, 0x01	; 1
 5f8:	08 95       	ret
		case GPIOB : LocGetValue = GET_BIT (PINB_REGISTER ,  copy_u8Pin ); break ;
 5fa:	86 b3       	in	r24, 0x16	; 22
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <MDIO_voidGetPinValue+0x2c>
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	6a 95       	dec	r22
 606:	e2 f7       	brpl	.-8      	; 0x600 <MDIO_voidGetPinValue+0x28>
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	08 95       	ret
		case GPIOC : LocGetValue = GET_BIT (PINC_REGISTER ,  copy_u8Pin ); break ;
 60c:	83 b3       	in	r24, 0x13	; 19
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	02 c0       	rjmp	.+4      	; 0x616 <MDIO_voidGetPinValue+0x3e>
 612:	95 95       	asr	r25
 614:	87 95       	ror	r24
 616:	6a 95       	dec	r22
 618:	e2 f7       	brpl	.-8      	; 0x612 <MDIO_voidGetPinValue+0x3a>
 61a:	81 70       	andi	r24, 0x01	; 1
 61c:	08 95       	ret
		case GPIOD : LocGetValue = GET_BIT (PIND_REGISTER ,  copy_u8Pin ); break ;
 61e:	80 b3       	in	r24, 0x10	; 16
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <MDIO_voidGetPinValue+0x50>
 624:	95 95       	asr	r25
 626:	87 95       	ror	r24
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <MDIO_voidGetPinValue+0x4c>
 62c:	81 70       	andi	r24, 0x01	; 1
 62e:	08 95       	ret
* Description	  : Function used to get the Specific Pin Value High of Low 
**********************************************************************************************************************************/

u8 MDIO_voidGetPinValue (u8 copy_u8Port , u8 copy_u8Pin )
{
	u8 LocGetValue = 0 ;
 630:	80 e0       	ldi	r24, 0x00	; 0
		case GPIOC : LocGetValue = GET_BIT (PINC_REGISTER ,  copy_u8Pin ); break ;
		case GPIOD : LocGetValue = GET_BIT (PIND_REGISTER ,  copy_u8Pin ); break ;
		
	}
	return LocGetValue ; 
}
 632:	08 95       	ret

00000634 <MPWM_voidPwmInit>:
 634:	83 b7       	in	r24, 0x33	; 51
 636:	8b 7f       	andi	r24, 0xFB	; 251
 638:	83 bf       	out	0x33, r24	; 51
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	8d 7f       	andi	r24, 0xFD	; 253
 63e:	83 bf       	out	0x33, r24	; 51
 640:	83 b7       	in	r24, 0x33	; 51
 642:	8e 7f       	andi	r24, 0xFE	; 254
 644:	83 bf       	out	0x33, r24	; 51
 646:	8e b5       	in	r24, 0x2e	; 46
 648:	80 61       	ori	r24, 0x10	; 16
 64a:	8e bd       	out	0x2e, r24	; 46
 64c:	8e b5       	in	r24, 0x2e	; 46
 64e:	88 60       	ori	r24, 0x08	; 8
 650:	8e bd       	out	0x2e, r24	; 46
 652:	8f b5       	in	r24, 0x2f	; 47
 654:	82 60       	ori	r24, 0x02	; 2
 656:	8f bd       	out	0x2f, r24	; 47
 658:	8f b5       	in	r24, 0x2f	; 47
 65a:	8e 7f       	andi	r24, 0xFE	; 254
 65c:	8f bd       	out	0x2f, r24	; 47
 65e:	41 e0       	ldi	r20, 0x01	; 1
 660:	64 e0       	ldi	r22, 0x04	; 4
 662:	83 e0       	ldi	r24, 0x03	; 3
 664:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MDIO_voidSetPinDirection>
 668:	41 e0       	ldi	r20, 0x01	; 1
 66a:	65 e0       	ldi	r22, 0x05	; 5
 66c:	83 e0       	ldi	r24, 0x03	; 3
 66e:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <MDIO_voidSetPinDirection>
 672:	8f b5       	in	r24, 0x2f	; 47
 674:	80 68       	ori	r24, 0x80	; 128
 676:	8f bd       	out	0x2f, r24	; 47
 678:	8f b5       	in	r24, 0x2f	; 47
 67a:	80 62       	ori	r24, 0x20	; 32
 67c:	8f bd       	out	0x2f, r24	; 47
 67e:	8f b5       	in	r24, 0x2f	; 47
 680:	8f 7b       	andi	r24, 0xBF	; 191
 682:	8f bd       	out	0x2f, r24	; 47
 684:	8f b5       	in	r24, 0x2f	; 47
 686:	8f 7e       	andi	r24, 0xEF	; 239
 688:	8f bd       	out	0x2f, r24	; 47
 68a:	08 95       	ret

0000068c <MPWM_voidSetDutyCycle>:
 68c:	29 ef       	ldi	r18, 0xF9	; 249
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	37 bd       	out	0x27, r19	; 39
 692:	26 bd       	out	0x26, r18	; 38
 694:	20 e0       	ldi	r18, 0x00	; 0
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	48 ec       	ldi	r20, 0xC8	; 200
 69a:	52 e4       	ldi	r21, 0x42	; 66
 69c:	0e 94 65 03 	call	0x6ca	; 0x6ca <__divsf3>
 6a0:	20 e0       	ldi	r18, 0x00	; 0
 6a2:	30 e0       	ldi	r19, 0x00	; 0
 6a4:	4a e7       	ldi	r20, 0x7A	; 122
 6a6:	53 e4       	ldi	r21, 0x43	; 67
 6a8:	0e 94 94 04 	call	0x928	; 0x928 <__mulsf3>
 6ac:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fixunssfsi>
 6b0:	7b bd       	out	0x2b, r23	; 43
 6b2:	6a bd       	out	0x2a, r22	; 42
 6b4:	79 bd       	out	0x29, r23	; 41
 6b6:	68 bd       	out	0x28, r22	; 40
 6b8:	08 95       	ret

000006ba <MPWM_voidStartPWM>:
 6ba:	8e b5       	in	r24, 0x2e	; 46
 6bc:	84 60       	ori	r24, 0x04	; 4
 6be:	8e bd       	out	0x2e, r24	; 46
 6c0:	08 95       	ret

000006c2 <MPWM_voidStopPWM>:
 6c2:	8e b5       	in	r24, 0x2e	; 46
 6c4:	88 6f       	ori	r24, 0xF8	; 248
 6c6:	8e bd       	out	0x2e, r24	; 46
 6c8:	08 95       	ret

000006ca <__divsf3>:
 6ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__divsf3x>
 6ce:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
 6d2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
 6d6:	58 f0       	brcs	.+22     	; 0x6ee <__divsf3+0x24>
 6d8:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
 6dc:	40 f0       	brcs	.+16     	; 0x6ee <__divsf3+0x24>
 6de:	29 f4       	brne	.+10     	; 0x6ea <__divsf3+0x20>
 6e0:	5f 3f       	cpi	r21, 0xFF	; 255
 6e2:	29 f0       	breq	.+10     	; 0x6ee <__divsf3+0x24>
 6e4:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
 6e8:	51 11       	cpse	r21, r1
 6ea:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 6ee:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_nan>

000006f2 <__divsf3x>:
 6f2:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
 6f6:	68 f3       	brcs	.-38     	; 0x6d2 <__divsf3+0x8>

000006f8 <__divsf3_pse>:
 6f8:	99 23       	and	r25, r25
 6fa:	b1 f3       	breq	.-20     	; 0x6e8 <__divsf3+0x1e>
 6fc:	55 23       	and	r21, r21
 6fe:	91 f3       	breq	.-28     	; 0x6e4 <__divsf3+0x1a>
 700:	95 1b       	sub	r25, r21
 702:	55 0b       	sbc	r21, r21
 704:	bb 27       	eor	r27, r27
 706:	aa 27       	eor	r26, r26
 708:	62 17       	cp	r22, r18
 70a:	73 07       	cpc	r23, r19
 70c:	84 07       	cpc	r24, r20
 70e:	38 f0       	brcs	.+14     	; 0x71e <__divsf3_pse+0x26>
 710:	9f 5f       	subi	r25, 0xFF	; 255
 712:	5f 4f       	sbci	r21, 0xFF	; 255
 714:	22 0f       	add	r18, r18
 716:	33 1f       	adc	r19, r19
 718:	44 1f       	adc	r20, r20
 71a:	aa 1f       	adc	r26, r26
 71c:	a9 f3       	breq	.-22     	; 0x708 <__divsf3_pse+0x10>
 71e:	35 d0       	rcall	.+106    	; 0x78a <__divsf3_pse+0x92>
 720:	0e 2e       	mov	r0, r30
 722:	3a f0       	brmi	.+14     	; 0x732 <__divsf3_pse+0x3a>
 724:	e0 e8       	ldi	r30, 0x80	; 128
 726:	32 d0       	rcall	.+100    	; 0x78c <__divsf3_pse+0x94>
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	50 40       	sbci	r21, 0x00	; 0
 72c:	e6 95       	lsr	r30
 72e:	00 1c       	adc	r0, r0
 730:	ca f7       	brpl	.-14     	; 0x724 <__divsf3_pse+0x2c>
 732:	2b d0       	rcall	.+86     	; 0x78a <__divsf3_pse+0x92>
 734:	fe 2f       	mov	r31, r30
 736:	29 d0       	rcall	.+82     	; 0x78a <__divsf3_pse+0x92>
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	88 1f       	adc	r24, r24
 73e:	bb 1f       	adc	r27, r27
 740:	26 17       	cp	r18, r22
 742:	37 07       	cpc	r19, r23
 744:	48 07       	cpc	r20, r24
 746:	ab 07       	cpc	r26, r27
 748:	b0 e8       	ldi	r27, 0x80	; 128
 74a:	09 f0       	breq	.+2      	; 0x74e <__divsf3_pse+0x56>
 74c:	bb 0b       	sbc	r27, r27
 74e:	80 2d       	mov	r24, r0
 750:	bf 01       	movw	r22, r30
 752:	ff 27       	eor	r31, r31
 754:	93 58       	subi	r25, 0x83	; 131
 756:	5f 4f       	sbci	r21, 0xFF	; 255
 758:	3a f0       	brmi	.+14     	; 0x768 <__divsf3_pse+0x70>
 75a:	9e 3f       	cpi	r25, 0xFE	; 254
 75c:	51 05       	cpc	r21, r1
 75e:	78 f0       	brcs	.+30     	; 0x77e <__divsf3_pse+0x86>
 760:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
 764:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 768:	5f 3f       	cpi	r21, 0xFF	; 255
 76a:	e4 f3       	brlt	.-8      	; 0x764 <__divsf3_pse+0x6c>
 76c:	98 3e       	cpi	r25, 0xE8	; 232
 76e:	d4 f3       	brlt	.-12     	; 0x764 <__divsf3_pse+0x6c>
 770:	86 95       	lsr	r24
 772:	77 95       	ror	r23
 774:	67 95       	ror	r22
 776:	b7 95       	ror	r27
 778:	f7 95       	ror	r31
 77a:	9f 5f       	subi	r25, 0xFF	; 255
 77c:	c9 f7       	brne	.-14     	; 0x770 <__divsf3_pse+0x78>
 77e:	88 0f       	add	r24, r24
 780:	91 1d       	adc	r25, r1
 782:	96 95       	lsr	r25
 784:	87 95       	ror	r24
 786:	97 f9       	bld	r25, 7
 788:	08 95       	ret
 78a:	e1 e0       	ldi	r30, 0x01	; 1
 78c:	66 0f       	add	r22, r22
 78e:	77 1f       	adc	r23, r23
 790:	88 1f       	adc	r24, r24
 792:	bb 1f       	adc	r27, r27
 794:	62 17       	cp	r22, r18
 796:	73 07       	cpc	r23, r19
 798:	84 07       	cpc	r24, r20
 79a:	ba 07       	cpc	r27, r26
 79c:	20 f0       	brcs	.+8      	; 0x7a6 <__divsf3_pse+0xae>
 79e:	62 1b       	sub	r22, r18
 7a0:	73 0b       	sbc	r23, r19
 7a2:	84 0b       	sbc	r24, r20
 7a4:	ba 0b       	sbc	r27, r26
 7a6:	ee 1f       	adc	r30, r30
 7a8:	88 f7       	brcc	.-30     	; 0x78c <__divsf3_pse+0x94>
 7aa:	e0 95       	com	r30
 7ac:	08 95       	ret

000007ae <__fixunssfsi>:
 7ae:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__fp_splitA>
 7b2:	88 f0       	brcs	.+34     	; 0x7d6 <__fixunssfsi+0x28>
 7b4:	9f 57       	subi	r25, 0x7F	; 127
 7b6:	98 f0       	brcs	.+38     	; 0x7de <__fixunssfsi+0x30>
 7b8:	b9 2f       	mov	r27, r25
 7ba:	99 27       	eor	r25, r25
 7bc:	b7 51       	subi	r27, 0x17	; 23
 7be:	b0 f0       	brcs	.+44     	; 0x7ec <__fixunssfsi+0x3e>
 7c0:	e1 f0       	breq	.+56     	; 0x7fa <__fixunssfsi+0x4c>
 7c2:	66 0f       	add	r22, r22
 7c4:	77 1f       	adc	r23, r23
 7c6:	88 1f       	adc	r24, r24
 7c8:	99 1f       	adc	r25, r25
 7ca:	1a f0       	brmi	.+6      	; 0x7d2 <__fixunssfsi+0x24>
 7cc:	ba 95       	dec	r27
 7ce:	c9 f7       	brne	.-14     	; 0x7c2 <__fixunssfsi+0x14>
 7d0:	14 c0       	rjmp	.+40     	; 0x7fa <__fixunssfsi+0x4c>
 7d2:	b1 30       	cpi	r27, 0x01	; 1
 7d4:	91 f0       	breq	.+36     	; 0x7fa <__fixunssfsi+0x4c>
 7d6:	0e 94 8d 04 	call	0x91a	; 0x91a <__fp_zero>
 7da:	b1 e0       	ldi	r27, 0x01	; 1
 7dc:	08 95       	ret
 7de:	0c 94 8d 04 	jmp	0x91a	; 0x91a <__fp_zero>
 7e2:	67 2f       	mov	r22, r23
 7e4:	78 2f       	mov	r23, r24
 7e6:	88 27       	eor	r24, r24
 7e8:	b8 5f       	subi	r27, 0xF8	; 248
 7ea:	39 f0       	breq	.+14     	; 0x7fa <__fixunssfsi+0x4c>
 7ec:	b9 3f       	cpi	r27, 0xF9	; 249
 7ee:	cc f3       	brlt	.-14     	; 0x7e2 <__fixunssfsi+0x34>
 7f0:	86 95       	lsr	r24
 7f2:	77 95       	ror	r23
 7f4:	67 95       	ror	r22
 7f6:	b3 95       	inc	r27
 7f8:	d9 f7       	brne	.-10     	; 0x7f0 <__fixunssfsi+0x42>
 7fa:	3e f4       	brtc	.+14     	; 0x80a <__fixunssfsi+0x5c>
 7fc:	90 95       	com	r25
 7fe:	80 95       	com	r24
 800:	70 95       	com	r23
 802:	61 95       	neg	r22
 804:	7f 4f       	sbci	r23, 0xFF	; 255
 806:	8f 4f       	sbci	r24, 0xFF	; 255
 808:	9f 4f       	sbci	r25, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__floatunsisf>:
 80c:	e8 94       	clt
 80e:	09 c0       	rjmp	.+18     	; 0x822 <__floatsisf+0x12>

00000810 <__floatsisf>:
 810:	97 fb       	bst	r25, 7
 812:	3e f4       	brtc	.+14     	; 0x822 <__floatsisf+0x12>
 814:	90 95       	com	r25
 816:	80 95       	com	r24
 818:	70 95       	com	r23
 81a:	61 95       	neg	r22
 81c:	7f 4f       	sbci	r23, 0xFF	; 255
 81e:	8f 4f       	sbci	r24, 0xFF	; 255
 820:	9f 4f       	sbci	r25, 0xFF	; 255
 822:	99 23       	and	r25, r25
 824:	a9 f0       	breq	.+42     	; 0x850 <__floatsisf+0x40>
 826:	f9 2f       	mov	r31, r25
 828:	96 e9       	ldi	r25, 0x96	; 150
 82a:	bb 27       	eor	r27, r27
 82c:	93 95       	inc	r25
 82e:	f6 95       	lsr	r31
 830:	87 95       	ror	r24
 832:	77 95       	ror	r23
 834:	67 95       	ror	r22
 836:	b7 95       	ror	r27
 838:	f1 11       	cpse	r31, r1
 83a:	f8 cf       	rjmp	.-16     	; 0x82c <__floatsisf+0x1c>
 83c:	fa f4       	brpl	.+62     	; 0x87c <__stack+0x1d>
 83e:	bb 0f       	add	r27, r27
 840:	11 f4       	brne	.+4      	; 0x846 <__floatsisf+0x36>
 842:	60 ff       	sbrs	r22, 0
 844:	1b c0       	rjmp	.+54     	; 0x87c <__stack+0x1d>
 846:	6f 5f       	subi	r22, 0xFF	; 255
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	16 c0       	rjmp	.+44     	; 0x87c <__stack+0x1d>
 850:	88 23       	and	r24, r24
 852:	11 f0       	breq	.+4      	; 0x858 <__floatsisf+0x48>
 854:	96 e9       	ldi	r25, 0x96	; 150
 856:	11 c0       	rjmp	.+34     	; 0x87a <__stack+0x1b>
 858:	77 23       	and	r23, r23
 85a:	21 f0       	breq	.+8      	; 0x864 <__stack+0x5>
 85c:	9e e8       	ldi	r25, 0x8E	; 142
 85e:	87 2f       	mov	r24, r23
 860:	76 2f       	mov	r23, r22
 862:	05 c0       	rjmp	.+10     	; 0x86e <__stack+0xf>
 864:	66 23       	and	r22, r22
 866:	71 f0       	breq	.+28     	; 0x884 <__stack+0x25>
 868:	96 e8       	ldi	r25, 0x86	; 134
 86a:	86 2f       	mov	r24, r22
 86c:	70 e0       	ldi	r23, 0x00	; 0
 86e:	60 e0       	ldi	r22, 0x00	; 0
 870:	2a f0       	brmi	.+10     	; 0x87c <__stack+0x1d>
 872:	9a 95       	dec	r25
 874:	66 0f       	add	r22, r22
 876:	77 1f       	adc	r23, r23
 878:	88 1f       	adc	r24, r24
 87a:	da f7       	brpl	.-10     	; 0x872 <__stack+0x13>
 87c:	88 0f       	add	r24, r24
 87e:	96 95       	lsr	r25
 880:	87 95       	ror	r24
 882:	97 f9       	bld	r25, 7
 884:	08 95       	ret

00000886 <__fp_inf>:
 886:	97 f9       	bld	r25, 7
 888:	9f 67       	ori	r25, 0x7F	; 127
 88a:	80 e8       	ldi	r24, 0x80	; 128
 88c:	70 e0       	ldi	r23, 0x00	; 0
 88e:	60 e0       	ldi	r22, 0x00	; 0
 890:	08 95       	ret

00000892 <__fp_nan>:
 892:	9f ef       	ldi	r25, 0xFF	; 255
 894:	80 ec       	ldi	r24, 0xC0	; 192
 896:	08 95       	ret

00000898 <__fp_pscA>:
 898:	00 24       	eor	r0, r0
 89a:	0a 94       	dec	r0
 89c:	16 16       	cp	r1, r22
 89e:	17 06       	cpc	r1, r23
 8a0:	18 06       	cpc	r1, r24
 8a2:	09 06       	cpc	r0, r25
 8a4:	08 95       	ret

000008a6 <__fp_pscB>:
 8a6:	00 24       	eor	r0, r0
 8a8:	0a 94       	dec	r0
 8aa:	12 16       	cp	r1, r18
 8ac:	13 06       	cpc	r1, r19
 8ae:	14 06       	cpc	r1, r20
 8b0:	05 06       	cpc	r0, r21
 8b2:	08 95       	ret

000008b4 <__fp_round>:
 8b4:	09 2e       	mov	r0, r25
 8b6:	03 94       	inc	r0
 8b8:	00 0c       	add	r0, r0
 8ba:	11 f4       	brne	.+4      	; 0x8c0 <__fp_round+0xc>
 8bc:	88 23       	and	r24, r24
 8be:	52 f0       	brmi	.+20     	; 0x8d4 <__fp_round+0x20>
 8c0:	bb 0f       	add	r27, r27
 8c2:	40 f4       	brcc	.+16     	; 0x8d4 <__fp_round+0x20>
 8c4:	bf 2b       	or	r27, r31
 8c6:	11 f4       	brne	.+4      	; 0x8cc <__fp_round+0x18>
 8c8:	60 ff       	sbrs	r22, 0
 8ca:	04 c0       	rjmp	.+8      	; 0x8d4 <__fp_round+0x20>
 8cc:	6f 5f       	subi	r22, 0xFF	; 255
 8ce:	7f 4f       	sbci	r23, 0xFF	; 255
 8d0:	8f 4f       	sbci	r24, 0xFF	; 255
 8d2:	9f 4f       	sbci	r25, 0xFF	; 255
 8d4:	08 95       	ret

000008d6 <__fp_split3>:
 8d6:	57 fd       	sbrc	r21, 7
 8d8:	90 58       	subi	r25, 0x80	; 128
 8da:	44 0f       	add	r20, r20
 8dc:	55 1f       	adc	r21, r21
 8de:	59 f0       	breq	.+22     	; 0x8f6 <__fp_splitA+0x10>
 8e0:	5f 3f       	cpi	r21, 0xFF	; 255
 8e2:	71 f0       	breq	.+28     	; 0x900 <__fp_splitA+0x1a>
 8e4:	47 95       	ror	r20

000008e6 <__fp_splitA>:
 8e6:	88 0f       	add	r24, r24
 8e8:	97 fb       	bst	r25, 7
 8ea:	99 1f       	adc	r25, r25
 8ec:	61 f0       	breq	.+24     	; 0x906 <__fp_splitA+0x20>
 8ee:	9f 3f       	cpi	r25, 0xFF	; 255
 8f0:	79 f0       	breq	.+30     	; 0x910 <__fp_splitA+0x2a>
 8f2:	87 95       	ror	r24
 8f4:	08 95       	ret
 8f6:	12 16       	cp	r1, r18
 8f8:	13 06       	cpc	r1, r19
 8fa:	14 06       	cpc	r1, r20
 8fc:	55 1f       	adc	r21, r21
 8fe:	f2 cf       	rjmp	.-28     	; 0x8e4 <__fp_split3+0xe>
 900:	46 95       	lsr	r20
 902:	f1 df       	rcall	.-30     	; 0x8e6 <__fp_splitA>
 904:	08 c0       	rjmp	.+16     	; 0x916 <__fp_splitA+0x30>
 906:	16 16       	cp	r1, r22
 908:	17 06       	cpc	r1, r23
 90a:	18 06       	cpc	r1, r24
 90c:	99 1f       	adc	r25, r25
 90e:	f1 cf       	rjmp	.-30     	; 0x8f2 <__fp_splitA+0xc>
 910:	86 95       	lsr	r24
 912:	71 05       	cpc	r23, r1
 914:	61 05       	cpc	r22, r1
 916:	08 94       	sec
 918:	08 95       	ret

0000091a <__fp_zero>:
 91a:	e8 94       	clt

0000091c <__fp_szero>:
 91c:	bb 27       	eor	r27, r27
 91e:	66 27       	eor	r22, r22
 920:	77 27       	eor	r23, r23
 922:	cb 01       	movw	r24, r22
 924:	97 f9       	bld	r25, 7
 926:	08 95       	ret

00000928 <__mulsf3>:
 928:	0e 94 a7 04 	call	0x94e	; 0x94e <__mulsf3x>
 92c:	0c 94 5a 04 	jmp	0x8b4	; 0x8b4 <__fp_round>
 930:	0e 94 4c 04 	call	0x898	; 0x898 <__fp_pscA>
 934:	38 f0       	brcs	.+14     	; 0x944 <__mulsf3+0x1c>
 936:	0e 94 53 04 	call	0x8a6	; 0x8a6 <__fp_pscB>
 93a:	20 f0       	brcs	.+8      	; 0x944 <__mulsf3+0x1c>
 93c:	95 23       	and	r25, r21
 93e:	11 f0       	breq	.+4      	; 0x944 <__mulsf3+0x1c>
 940:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
 944:	0c 94 49 04 	jmp	0x892	; 0x892 <__fp_nan>
 948:	11 24       	eor	r1, r1
 94a:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>

0000094e <__mulsf3x>:
 94e:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <__fp_split3>
 952:	70 f3       	brcs	.-36     	; 0x930 <__mulsf3+0x8>

00000954 <__mulsf3_pse>:
 954:	95 9f       	mul	r25, r21
 956:	c1 f3       	breq	.-16     	; 0x948 <__mulsf3+0x20>
 958:	95 0f       	add	r25, r21
 95a:	50 e0       	ldi	r21, 0x00	; 0
 95c:	55 1f       	adc	r21, r21
 95e:	62 9f       	mul	r22, r18
 960:	f0 01       	movw	r30, r0
 962:	72 9f       	mul	r23, r18
 964:	bb 27       	eor	r27, r27
 966:	f0 0d       	add	r31, r0
 968:	b1 1d       	adc	r27, r1
 96a:	63 9f       	mul	r22, r19
 96c:	aa 27       	eor	r26, r26
 96e:	f0 0d       	add	r31, r0
 970:	b1 1d       	adc	r27, r1
 972:	aa 1f       	adc	r26, r26
 974:	64 9f       	mul	r22, r20
 976:	66 27       	eor	r22, r22
 978:	b0 0d       	add	r27, r0
 97a:	a1 1d       	adc	r26, r1
 97c:	66 1f       	adc	r22, r22
 97e:	82 9f       	mul	r24, r18
 980:	22 27       	eor	r18, r18
 982:	b0 0d       	add	r27, r0
 984:	a1 1d       	adc	r26, r1
 986:	62 1f       	adc	r22, r18
 988:	73 9f       	mul	r23, r19
 98a:	b0 0d       	add	r27, r0
 98c:	a1 1d       	adc	r26, r1
 98e:	62 1f       	adc	r22, r18
 990:	83 9f       	mul	r24, r19
 992:	a0 0d       	add	r26, r0
 994:	61 1d       	adc	r22, r1
 996:	22 1f       	adc	r18, r18
 998:	74 9f       	mul	r23, r20
 99a:	33 27       	eor	r19, r19
 99c:	a0 0d       	add	r26, r0
 99e:	61 1d       	adc	r22, r1
 9a0:	23 1f       	adc	r18, r19
 9a2:	84 9f       	mul	r24, r20
 9a4:	60 0d       	add	r22, r0
 9a6:	21 1d       	adc	r18, r1
 9a8:	82 2f       	mov	r24, r18
 9aa:	76 2f       	mov	r23, r22
 9ac:	6a 2f       	mov	r22, r26
 9ae:	11 24       	eor	r1, r1
 9b0:	9f 57       	subi	r25, 0x7F	; 127
 9b2:	50 40       	sbci	r21, 0x00	; 0
 9b4:	9a f0       	brmi	.+38     	; 0x9dc <__mulsf3_pse+0x88>
 9b6:	f1 f0       	breq	.+60     	; 0x9f4 <__mulsf3_pse+0xa0>
 9b8:	88 23       	and	r24, r24
 9ba:	4a f0       	brmi	.+18     	; 0x9ce <__mulsf3_pse+0x7a>
 9bc:	ee 0f       	add	r30, r30
 9be:	ff 1f       	adc	r31, r31
 9c0:	bb 1f       	adc	r27, r27
 9c2:	66 1f       	adc	r22, r22
 9c4:	77 1f       	adc	r23, r23
 9c6:	88 1f       	adc	r24, r24
 9c8:	91 50       	subi	r25, 0x01	; 1
 9ca:	50 40       	sbci	r21, 0x00	; 0
 9cc:	a9 f7       	brne	.-22     	; 0x9b8 <__mulsf3_pse+0x64>
 9ce:	9e 3f       	cpi	r25, 0xFE	; 254
 9d0:	51 05       	cpc	r21, r1
 9d2:	80 f0       	brcs	.+32     	; 0x9f4 <__mulsf3_pse+0xa0>
 9d4:	0c 94 43 04 	jmp	0x886	; 0x886 <__fp_inf>
 9d8:	0c 94 8e 04 	jmp	0x91c	; 0x91c <__fp_szero>
 9dc:	5f 3f       	cpi	r21, 0xFF	; 255
 9de:	e4 f3       	brlt	.-8      	; 0x9d8 <__mulsf3_pse+0x84>
 9e0:	98 3e       	cpi	r25, 0xE8	; 232
 9e2:	d4 f3       	brlt	.-12     	; 0x9d8 <__mulsf3_pse+0x84>
 9e4:	86 95       	lsr	r24
 9e6:	77 95       	ror	r23
 9e8:	67 95       	ror	r22
 9ea:	b7 95       	ror	r27
 9ec:	f7 95       	ror	r31
 9ee:	e7 95       	ror	r30
 9f0:	9f 5f       	subi	r25, 0xFF	; 255
 9f2:	c1 f7       	brne	.-16     	; 0x9e4 <__mulsf3_pse+0x90>
 9f4:	fe 2b       	or	r31, r30
 9f6:	88 0f       	add	r24, r24
 9f8:	91 1d       	adc	r25, r1
 9fa:	96 95       	lsr	r25
 9fc:	87 95       	ror	r24
 9fe:	97 f9       	bld	r25, 7
 a00:	08 95       	ret

00000a02 <_exit>:
 a02:	f8 94       	cli

00000a04 <__stop_program>:
 a04:	ff cf       	rjmp	.-2      	; 0xa04 <__stop_program>
